{-
    storage#_ owner:MsgAddressInt event:MsgAddressInt outcome:Uint8 = Storage;
-}

(slice, slice, int) load_data () inline {
    slice ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds~load_msg_addr(), ds~load_uint(8));
}

() recv_internal (int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore bounced messages
        return ();
    }

    slice sender = cs~load_msg_addr();
    (slice owner, slice event, int outcome) = load_data();
    throw_unless(701, equal_slice_bits(sender, owner)); ;; only allow owner to interact with the contract

    int op = in_msg_body~load_uint(32);

    if (op == op::close()) {
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(event)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::payout_request(), 32)
            .store_slice(owner)
            .store_uint(outcome, 8)
        .end_cell(), 128);
    }

    elseif (op == op::payout_response()) {
        int success = in_msg_body~load_uint(1);
        if (success == 1) {
            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(owner)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
                .store_slice("Congratulations!")
            .end_cell(), 128 + 32);
        }
    }
}
